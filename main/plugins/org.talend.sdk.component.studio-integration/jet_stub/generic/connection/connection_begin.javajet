<%/*
  Copyright (C) 2006-2021 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>

<%@ jet
    imports="
        org.talend.core.model.process.INode
        org.talend.core.runtime.IAdditionalInfo
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.core.model.components.EParameterName
        org.talend.designer.core.model.components.ElementParameter
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.utils.NodeUtil
        java.util.List
    "
%>
<%
final CodeGeneratorArgument codeGenArgument = CodeGeneratorArgument.class.cast(argument);
final INode node = INode.class.cast(codeGenArgument.getArgument());
if(node == null) {
    throw new IllegalArgumentException("node cannot be null");
}
final String cid = node.getUniqueName();
final String originalName = (String)node.getElementParameter(EParameterName.COMPONENT_NAME.getName()).getValue();
final String plugin = (String)node.getElementParameter("___TACOKIT_COMPONENT_PLUGIN_NAME___").getValue();
final String version = (String)node.getElementParameter(EParameterName.VERSION.getName()).getValue();
%>

final org.talend.sdk.component.runtime.manager.ComponentManager mgr_<%=cid%> = org.talend.sdk.component.runtime.manager.ComponentManager.instance();
if (mgr_<%=cid%>.getContainer().findAll().isEmpty()) {
    mgr_<%=cid%>.autoDiscoverPlugins(false, true);
}

<%@include file="../configuration.javajet"%>

mgr_<%=cid%>.findPlugin("<%=plugin%>")
    .orElseThrow(() -> new IllegalStateException("Can't find the plugin : <%=plugin%>"))
    .get(org.talend.sdk.component.runtime.manager.ContainerComponentRegistry.class)
    .getServices()
    .stream()
    .forEach(serviceMeta_<%=cid%> -> {
        serviceMeta_<%=cid%>.getActions().stream().filter(actionMeta_<%=cid%> -> "create_connection".equals(actionMeta_<%=cid%>.getType())).forEach(actionMeta_<%=cid%> -> {
            synchronized (serviceMeta_<%=cid%>.getInstance()) {
                org.talend.sdk.component.runtime.di.studio.RuntimeContextInjector.injectService(mgr_<%=cid%>, "<%=plugin%>", new org.talend.sdk.component.api.context.RuntimeContainer("<%=cid%>", globalMap));
                
                Object connnection_<%=cid%> = actionMeta_<%=cid%>.getInvoker().apply(configuration_<%=cid%>);

                globalMap.put("conn_<%=cid%>", connnection_<%=cid%>);
                
                <%for(String passwordKey : passwordKeys) {%>
                configuration_<%=cid%>.put("<%=passwordKey%>", "securityFakePassword");
                <%}%>
                globalMap.put("configuration_<%=cid%>", configuration_<%=cid%>);
            }
        });
    });
